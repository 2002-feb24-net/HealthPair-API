# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

stages:

- stage: build

  variables:
    sdkVersion: 3.1.x
    solutionPath: ./HealthPairService
    buildConfiguration: Release

  jobs:

  - job: build

    pool:
     vmImage: 'ubuntu-latest'


    steps:

     - task: UseDotNet@2
       inputs:
         packageType: sdk
         version: $(sdkVersion)
       displayName: dotnet $(sdkVersion)

     - task: DotNetCoreCLI@2
       inputs:
         command: publish
         publishWebProjects: true
         arguments:
           --configuration $(buildConfiguration)
           --output $(Build.ArtifactStagingDirectory)/app
         modifyOutputPath: false
         zipAfterPublish: false
       displayName: dotnet publish

     - publish: $(Build.ArtifactStagingDirectory)/app
       artifact: app
       displayName: artifact publish app


  - job: test

    pool:
      vmImage: windows-latest

    steps:

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(sdkVersion)
      displayName: dotnet $(sdkVersion)
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'healthpair-api'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: 'HealthPair-API'
    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(sdkVersion)
      displayName: dotnet $(sdkVersion)

    - script: dotnet build $(solutionPath)
        --configuration $(buildConfiguration)
      displayName: dotnet build

    - script: dotnet test
        --configuration $(buildConfiguration)
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)
        --settings ./coverlett.runsettings
      workingDirectory: $(solutionPath)
      continueOnError: true
      displayName: dotnet test

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Common.TestResultsDirectory)/*.trx
      displayName: test results build publish

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
      displayName: code coverage build publish

    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      displayName: sonarcloud results build publish


- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          - download: none

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'HealthPairDocker'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Build services'
            displayName: docker-compose build

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'HealthPairDocker'
              dockerComposeFile: 'docker-compose-prod.yml'
              action: 'Push services'
            displayName: docker-compose push

          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Azure subscription 1(3)(a2152353-9b25-48cf-bad2-948e50f630f2)'
              appName: 'HealthPair-Client'
              multicontainerConfigFile: 'docker-compose.prod.yml'
            displayName: azure app service deploy